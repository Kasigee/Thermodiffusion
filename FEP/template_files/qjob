#!/bin/bash

## EDIT THE FOLLOWING:
## GMX_LOCATION for whereever your GROMACS executable is located e.g. "/apps/gromacs/2023-gpuvolta/bin"
## PROJECT_NAME name of the project associated e.g. "g15"
## If your HPC uses a different queuing system such as SLURM, the whole PBS section (i.e. job"$forback".job) will need to be adapted for that.
## QNAME needs to be changed to the name of your queue "e.g. gpuvolta"
## The STORAGE_LOCATION will need updating "e.g. scratch/g15+scratch/em52"
## Possible there will be other things that need changing here if errors arise.

forback=$1

FREE_ENERGY=`pwd`
MDP=$FREE_ENERGY/MDP
GMX=GMX_LOCATION

FinCount=$(grep -l "Finished mdrun on rank 0" Lambda_[0-9]/Production_MD"$forback"/md*.log Lambda_[0-9][0-9]/Production_MD"$forback"/md*.log |  wc -l)
echo FinCount = $FinCount
if [ $FinCount -lt 21 ]
then
	echo Finished count is currently $FinCount
cat <<END > job"$forback".job
#!/bin/bash
#PBS -P PROJECT_NAME
#PBS -l ncpus=12
#PBS -l ngpus=1
#PBS -q QNAME
#PBS -l mem=4GB
#PBS -l walltime=15:00:00
#PBS -l wd
#PBS -o NA."$forback".olog
#PBS -N NA."$forback"job
#PBS -l storage=STORAGE_LOCATION

module load gromacs/2022-gpuvolta

export OMP_NUM_THREADS=12

# Set some environment variables 
#FREE_ENERGY=`pwd`
FREE_ENERGY='$FREE_ENERGY'
echo "Free energy home directory set to $FREE_ENERGY"
#MDP='$FREE_ENERGY'/MDP
MDP='$MDP'
echo ".mdp files are stored in $MDP"

# Change to the location of your GROMACS-2018 installation
GMX=GMX_LOCATION

for (( i=0; i<21; i++ ))
do
    LAMBDA=\$i

    # A new directory will be created for each value of lambda and
    # at each step in the workflow for maximum organization.

    mkdir '$FREE_ENERGY'/Lambda_\$LAMBDA
    cd '$FREE_ENERGY'/Lambda_\$LAMBDA

    if ! grep 'Finished mdrun' ../Production_MD"$forback"/md\$LAMBDA.log
        then
    
    ##############################
    # ENERGY MINIMIZATION STEEP  #
    ##############################
    echo "Starting minimization for lambda = \$LAMBDA..." 

    mkdir EM"$forback"
    cd EM"$forback"

    # Iterative calls to grompp and mdrun to run the simulations
    if ! grep 'Finished mdrun' min\$LAMBDA.log && ! grep 'Finished mdrun' ../NVT/nvt\$LAMBDA.log && ! grep 'Finished mdrun' ../NPT/npt\$LAMBDA.log && ! grep 'Finished mdrun' ../Production_MD"$forback"/md\$LAMBDA.log
	then
    $GMX/gmx grompp -f $MDP/EM"$forback"/em_steep_\$LAMBDA.mdp -c $FREE_ENERGY/NA_water_fixed.gro -p $FREE_ENERGY/topol.top -o min\$LAMBDA.tpr -maxwarn 2
    $GMX/gmx mdrun -deffnm min\$LAMBDA -ntmpi 1 -ntomp 12
    sleep 1
else
	echo "Minimisation EM\$LAMBDA"$forback" complete."
fi

    #####################
    # NVT EQUILIBRATION #
    #####################
    echo "Starting constant volume equilibration..."

    cd ../
    mkdir NVT"$forback"
    cd NVT"$forback"
    if ! grep 'Finished mdrun' nvt\$LAMBDA.log && ! grep 'Finished mdrun' ../NPT/npt\$LAMBDA.log && ! grep 'Finished mdrun' ../Production_MD"$forback"/md\$LAMBDA.log
        then
    $GMX/gmx grompp -f $MDP/NVT"$forback"/nvt_\$LAMBDA.mdp -c ../EM"$forback"/min\$LAMBDA.gro -p $FREE_ENERGY/topol.top -o nvt\$LAMBDA.tpr -maxwarn 2
    rm -r ../EM"$forback"/
    $GMX/gmx mdrun -v -ntmpi 1 -ntomp 12 -deffnm nvt\$LAMBDA
    echo "Constant volume equilibration complete."
    sleep 1
else
	echo "Constant volume equilibration NVT\$LAMBDA"$forback" complete."
fi

    #####################
    # NPT EQUILIBRATION #
    #####################
    echo "Starting constant pressure equilibration..."

    cd ../
    mkdir NPT"$forback"
    cd NPT"$forback"
    if ! grep 'Finished mdrun' npt\$LAMBDA.log  && ! grep 'Finished mdrun' ../Production_MD"$forback"/md\$LAMBDA.log
then
    $GMX/gmx grompp -f $MDP/NPT"$forback"/npt_\$LAMBDA.mdp -c ../NVT"$forback"/nvt\$LAMBDA.gro -p $FREE_ENERGY/topol.top -t ../NVT"$forback"/nvt\$LAMBDA.cpt -o npt\$LAMBDA.tpr -maxwarn 2
    rm -r ../NVT"$forback"/
    $GMX/gmx mdrun -v -ntmpi 1 -ntomp 12 -deffnm npt\$LAMBDA
    echo "Constant pressure equilibration complete."
    sleep 1
else
	echo "Constant pressure equilibration NPT\$LAMBDA"$forback" complete."
fi

#    boxcutoff=\$( echo "scale =3; 1 npt\$LAMBDA.gro | awk '{print \$1}') / 2 - 0.1" | bc -l)
    #################
    # PRODUCTION MD #
    #################
    echo "Starting production MD simulation..."

    cd ../
    mkdir Production_MD"$forback"
    cd Production_MD"$forback"
if ! grep 'Finished mdrun' md\$LAMBDA.log 
then
    $GMX/gmx grompp -f $MDP/Production_MD"$forback"/md_\$LAMBDA.mdp -c ../NPT"$forback"/npt\$LAMBDA.gro -p $FREE_ENERGY/topol.top -t ../NPT"$forback"/npt\$LAMBDA.cpt -o md\$LAMBDA.tpr -maxwarn 2
    rm -r ../NPT"$forback"/
    $GMX/gmx mdrun -v -ntmpi 1 -ntomp 12 -deffnm md\$LAMBDA
    echo "Production MD"$forback" complete."
else
    echo "Ending. Job completed for lambda = \$LAMBDA"$forback""
fi
else
    echo "Ending. Job completed for lambda = \$LAMBDA"$forback""
fi
done
    cd $FREE_ENERGY
END

qsub -P g15 job"$forback".job
else
echo Job already run	
fi


if [ $(ls Lambda_[0-9]/Production_MD"$forback"/md*.xvg Lambda_[0-9][0-9]/Production_MD"$forback"/md*.xvg | wc -l) -ge 21 ]
then
#echo rm Lambda_[0-9]/EM Lambda_[0-9][0-9]/EM
if [ ! -f bar_analysis"$forback".dat ]
then
module load gromacs
gmx bar -f $(ls Lambda_[0-9]/Production_MD"$forback"/md*.xvg Lambda_[0-9][0-9]/Production_MD"$forback"/md*.xvg) -o -oi > bar_analysis"$forback".dat
tail -n48 bar_analysis"$forback".dat
else
tail -n48 bar_analysis"$forback".dat
fi
fi

exit
